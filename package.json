{  "name": "chat-catalyst",
  "displayName": "Chat Catalyst",
  "description": "Auto-inject custom prompts into GitHub Copilot Chat with smart long-prompt handling and session continuity setup",
  "version": "0.3.2",
  "license": "MIT",
  "author": {
    "name": "Loic Michel",
    "email": "loic@yespapa.eu"
  },
  "publisher": "LoicMICHEL",
  "icon": "chatcatalyst.jpeg",
  "repository": {
    "type": "git",
    "url": "https://github.com/kayasax/chat-catalyst"
  },
  "engines": {
    "vscode": "^1.94.0"
  },
  "categories": [
    "AI",
    "Chat"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "configuration": {
      "title": "Chat Catalyst",
      "properties": {        "chatCatalyst.autoPrompt": {
          "type": "string",
          "default": "Step 1: Load Project Context\nCheck if session_starter.md file exists in the workspace. If it exists: Read and use it to understand the project's goals, constraints, and current status. If it does not exist: Ask me \"Describe your project in a few words to get started\" and then create a basic session_starter.md file.\n\nStep 2: Maintain Persistent Memory\nALWAYS update the existing session_starter.md file with our session progress. Add new findings, decisions, blockers, and progress to the Update Log section. Do NOT create additional markdown files - use session_starter.md as the single source of truth for project memory.\n\nStep 3: Behavior Expectations\nBe proactive: suggest next steps, improvements, or missing pieces. Be concise and structured in your responses. Update the session_starter.md file regularly during our conversation to maintain continuity across sessions.\n\nIMPORTANT: Focus on updating the existing session_starter.md file rather than creating new documentation files. This file should serve as the persistent memory and be updated with each significant finding or decision.",
          "description": "The prompt that will be automatically injected when starting any chat session",
          "scope": "window"
        },
        "chatCatalyst.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic prompt injection",
          "scope": "window"
        },
        "chatCatalyst.customInstructionsTemplate": {
          "type": "string",
          "default": "# üß† Session Continuity Instructions for GitHub Copilot\n\n## Core Session Management Behaviors\n\n**ALWAYS when starting any session:**\n1. üìò Look for `Session_starter.md` when beginning work in any workspace\n2. üîÑ Update `Session_starter.md` with progress, decisions, and discoveries throughout the session\n3. üéØ Follow established patterns and technical decisions from session files\n4. üìÖ Add significant changes to update log using format: `| Date | Summary |`\n5. ‚úÖ Mark completed next steps as `[x] ‚úÖ COMPLETED`\n6. üîç Reference session context when making technical decisions\n\n**Session File Priority:**\n- Always prioritize `Session_starter.md` over `README.md` for project context\n- Scan workspace root, parent directory, and common subdirectories for session files\n- If no session file exists, offer to create one for future continuity\n\n**Update Discipline:**\n- Add meaningful progress to the update log section\n- Update \"Assistant Memory\" section with new discoveries and learnings\n- Maintain professional, concise update format\n- Track technical constraints, architecture decisions, and solved problems\n\n**Productivity Focus:**\n- Leverage session memory to avoid re-explaining established context\n- Build upon previous session achievements and patterns\n- Maintain consistency in coding style and architectural approaches\n- Provide seamless continuity across development sessions\n\n## Project Context Awareness\n\nWhen working on development projects:\n- Follow established technology stack patterns from session memory\n- Reference previous debugging solutions and architectural decisions\n- Maintain consistency with team coding standards documented in session files\n- Build incrementally on documented progress and achievements\n\n**This ensures consistent, productive development sessions with persistent project memory across all interactions.**",
          "markdownDescription": "Template for `.github/copilot-instructions.md` file. Supports variables: `{{PROJECT_NAME}}`, `{{PROJECT_TYPE}}`, `{{DATE}}`",
          "editPresentation": "multilineText",
          "scope": "application"
        },
        "chatCatalyst.sessionStarterTemplate": {
          "type": "string",
          "default": "# üß† AI Session Starter: {{PROJECT_NAME}}\n\n*Project memory file for AI assistant session continuity. Auto-referenced by custom instructions.*\n\n---\n\n## üìò Project Context\n**Project:** {{PROJECT_NAME}}\n**Type:** {{PROJECT_TYPE}}\n**Purpose:** [Describe the project purpose and goals]\n**Status:** üöÄ New project setup\n\n**Core Technologies:**\n{{TECH_STACK}}\n\n---\n\n## üéØ Current State\n**Build Status:** üîÑ In development\n**Key Achievement:** Project initialized with session continuity\n**Active Issue:** None - ready for development\n\n**Architecture Highlights:**\n- [Add key architectural decisions]\n- [Document important patterns or constraints]\n- [Note any special setup requirements]\n\n---\n\n## üß† Technical Memory\n\n**Critical Discoveries:**\n- Project created with Chat Catalyst session continuity setup\n- Custom instructions configured for consistent AI interactions\n- Session starter template customized for {{PROJECT_TYPE}} development\n\n**Performance Insights:**\n- [Add performance-related discoveries]\n- [Document optimization decisions]\n\n**Known Constraints:**\n- [Document any technical limitations]\n- [Note dependency requirements]\n- [Add environment-specific considerations]\n\n---\n\n## üöÄ Recent Achievements\n| Date | Achievement |\n|------|-------------|\n| {{DATE}} | ‚úÖ Project initialized with session continuity infrastructure |\n| {{DATE}} | ‚úÖ {{PROJECT_TYPE}} development environment configured |\n\n---\n\n## üìã Active Priorities\n- [ ] üèóÔ∏è Complete initial project setup\n- [ ] üì¶ Configure build pipeline\n- [ ] üß™ Set up testing framework\n- [ ] üìö Document core architecture decisions\n- [ ] üöÄ Implement first features\n\n---\n\n## üîß Development Environment\n**Common Commands:**\n{{COMMON_COMMANDS}}\n\n**Key Files:** [Document important project files]\n**Setup Requirements:** [List setup steps for new team members]\n\n---\n\n*This file serves as persistent project memory for enhanced AI assistant session continuity.*",
          "markdownDescription": "Template for `Session_starter.md` file. Supports variables: `{{PROJECT_NAME}}`, `{{PROJECT_TYPE}}`, `{{DATE}}`, `{{TECH_STACK}}`, `{{COMMON_COMMANDS}}`",
          "editPresentation": "multilineText",
          "scope": "application"
        }
      }
    },
    "commands": [
      {
        "command": "chatCatalyst.startChat",
        "title": "Start Chat with Auto-Prompt",
        "category": "Chat Catalyst"
      },
      {
        "command": "chatCatalyst.editPrompt",
        "title": "Edit Auto-Prompt",
        "category": "Chat Catalyst"
      },
      {
        "command": "chatCatalyst.toggle",
        "title": "Toggle Auto-Injection",
        "category": "Chat Catalyst"
      },
      {
        "command": "chatCatalyst.editCustomInstructions",
        "title": "Edit Copilot Custom Instructions Template ",
        "category": "Chat Catalyst"
      },
      {
        "command": "chatCatalyst.editSessionStarter",
        "title": "Edit Session Starter Template",
        "category": "Chat Catalyst"
      },
      {
        "command": "chatCatalyst.resetTemplates",
        "title": "Reset Templates to Default",
        "category": "Chat Catalyst"
      }
    ],    "keybindings": [
      {
        "command": "chatCatalyst.startChat",
        "key": "ctrl+alt+c",
        "mac": "cmd+alt+c"
      }
    ],
    "chatParticipants": [
      {
        "id": "chat-catalyst.auto-prompter",
        "fullName": "Chat Catalyst",
        "name": "catalyst",
        "description": "Auto-injects your custom prompt",
        "isSticky": true
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@stylistic/eslint-plugin": "^2.9.0",
    "@types/mocha": "^10.0.3",
    "@types/node": "18.x",
    "@types/vscode": "^1.94.0",
    "@vscode/test-electron": "^2.3.6",
    "eslint": "^9.13.0",
    "glob": "^10.3.10",
    "mocha": "^10.2.0",
    "typescript": "^5.8.2",
    "typescript-eslint": "^8.26.0"
  }
}
